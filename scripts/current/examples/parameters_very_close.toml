[env]
    damping = 1.0             # pg/hr (makes mass non-dimensional)
    domain = { center = [0.0, 0, 150], size = [500.0, 500, 300] }   # μm
    gravity = [0.0,0.0,0.0]  # μm/hr (as a velocity, assuming similar masses of all cells and stokes drag)

[sim]
    t_end   = "julia: 3*24.0"  # hr
    dt      = 0.02  # hr
    saveat  = 0.1   # hr

    [sim.collision_detection]
        boxsize = 22.0  # μm
        margin = 0.2  # 0-1

[signals]
    dx = 1.0   # μm
    grid = [50, 50, 15]
    dt = 0.001  # hr
    saveat = 0.1 # hr

    [signals.types.u]
        D = 0.12   # μm²/hr
        decay = 0.0001
        init = """julia: 
                        function (x, p)
                            std = 25.0
                            return 0 * exp( -dist²(x, p.env.domain.center) / (2 * std^2) )
                        end
                        """

[cells]
    R_soft = 10.0        # μm
    R_hard = 6.0         # μm 
    R_adh = 11.0         # μm
    R_attract = 25.0     # μm
    R_interact = 10.0    # μm (maximal interaction range)
    lifespan = 24.0      # hr
    repulsion_stiffness = 1.2
    sigma = 0.00         # μm / √hr (for additive white noise)
    sigma_p = 0.5       # μm / √hr (for active brownian particles, acts on polarity)
    v_self_prop = 12.0      # μm/hr (speed of cells in cluster)
    
    init = {R = 80.0}

    [cells.init_pos.custom_distr]
        domain_fnc = """julia: 
            function (x, p)
                R = p.cells.init.R
                c = (0, 0, 150)
                return R^2 - ((x[1]-c[1])^2 + (x[2]-c[2])^2 + (x[3]-c[3])^2)
            end"""
        domain_bounds = { center = [0.0, 0.0, 150.0], size = [500.0, 500.0, 300.0] }

    [cells.interaction]
        attraction_stiffness = 0.4
        adhesion_stiffness = 0.15
        new_adh_rate = 0.5  # 1/hr
        break_adh_rate = 0.5  # hr

    [cells.types.proximal]
        ID = 1
        N = 400
        adhesion_stiffness = 0.3
        attraction_stiffness = 0.6
        new_adh_rate = 0.9  # 1/hr
        break_adh_rate = 0.5  # hr


    [cells.types.distal]
        ID = 2
        N = 400
        adhesion_stiffness = 0.2
        attraction_stiffness = 0.6
        new_adh_rate = 1.0  # 1/hr
        break_adh_rate = 0.6  # hr

        [cells.types.distal.init_pos_old.custom_distr]
                distr = """julia: 
                    function (x, p)
                        dom = p.env.domain
                        if rand() < 0.5
                            rand!(x)
                            @. x = dom.center + (0.5 - x) .* dom.size
                        else
                            sigma = 50
                            center = (0, -100, 150)
                            randn!(x)
                            @. x = x * sigma + center
                        end
                    end
                    """
                domain_fnc = """julia: 
                    function (x, p)
                        R = p.cells.init.R
                        c = (0, 0, 150)
                        return R^2 - ((x[1]-c[1])^2 + (x[2]-c[2])^2 + (x[3]-c[3])^2)
                    end"""
                domain_bounds = { center = [0.0, 0.0, 150.0], size = [500.0, 500.0, 300.0] }


        # init_pos = {normal = {mean = [0.0,50,75], std = [30,30,15]}}

