[env]
    damping = 1.0             # pg/hr (makes mass non-dimensional)
    domain = { center = [0.0, 0, 150], size = [700.0, 700, 400] }   # μm
    gravity = [0.0,0.0,0.0]  # μm/hr (as a velocity, assuming similar masses of all cells and stokes drag)
    dim = "julia: Val(3)"
    periodic = true

[sim]
    t_end   = "julia: 3*24.0"  # hr
    dt      = 0.001  # hr
    saveat  = 0.1   # hr

    [sim.collision_detection]
        boxsize = 15.0  # μm
        margin = 0.01  # 0-1

[signals]
    dx = 1.0   # μm
    grid = [50, 50, 10]
    dt = 0.0001  # hr
    saveat = 0.1 # hr
    reltol = 1e-3 
    abstol = 1e-6

    [signals.types.u]
        D = 0.0   # μm²/hr
        decay = 0.0
        init = """julia: 
                        function (x, p)
                            std = 25.0
                            return 10.0 * exp( -dist²(x, p.env.domain.center) / (2 * std^2) )
                        end
                        """

[cells]
    R_soft = 15.0        # μm
    R_hard = 4.0         # μm 
    R_adh = 14.0         # μm
    R_attract = 13.0     # μm
    R_interact = 13.0    # μm (maximal interaction range)
    lifespan = 20.0 # hr
    repulsion_stiffness = 0.5
    sigma = 0.0         # μm / √hr (for additive white noise)
    sigma_p = 0.7       # μm / √hr (for active brownian particles, acts on polarity)
    plithotaxis = 0.0
    v_self_prop = 14.0      # μm/hr (speed of cells in cluster)
    
    new_adh_rate = 0.0  # 1/hr
    break_adh_rate = 0.0  # hr

    medium_active = true
    medium_repulsion = 0.5 # μm/hr
    medium_alpha = 1.0      # n.d.
    medium_slowdown = 0.5   # n.d.

    signal_emission = 0.0 # [PFG] / hr
    chemotaxis_strength = 0.0

    CIL = 0.2

    init = {R = 80.0}

    [cells.init_pos.custom_distr]
        domain_fnc = """julia: 
            function (x, p)
                R = p.cells.init.R
                c = (0, 0, 150)
                return R^2 - ((x[1]-c[1])^2 + (x[2]-c[2])^2 + (x[3]-c[3])^2)
            end"""
        domain_bounds = { center = [0.0, 0.0, 150.0], size = [500.0, 500.0, 300.0] }

    [cells.interaction]
        attraction_stiffness = 0.0 #1
        adhesion_stiffness = 0.2
        new_adh_rate = 1.0  # 1/hr
        break_adh_rate = 2.0  # hr

    [cells.types.proximal]
        ID = 1
        N = 300
        attraction_stiffness = 0.0 #4
        adhesion_stiffness = 0.5
        new_adh_rate = 1.0  # 1/hr
        break_adh_rate = 2.0  # 1/hr
        
        chemotaxis_strength = 1e2

    [cells.types.distal]
        ID = 2
        N = 200
        attraction_stiffness = 0.0 #3
        adhesion_stiffness = 0.8
        new_adh_rate = 2.0  # 1/hr
        break_adh_rate = 3.0  # 1/hr

        signal_emission = 0 # 1e4 # [PFG] / hr
        chemotaxis_strength = 1e3

        [cells.types.distal.init_pos.custom_distr]
                distr = """julia: 
                    function (x, p)
                        dom = p.env.domain
                        if rand() < 0.5
                            x = rand(typeof(x))
                            return dom.center .+ (0.5 .- x) .* dom.size
                        else
                            sigma = 50
                            center = (0.0, -100.0, 150.0)
                            x = randn(typeof(x))
                            return sigma * x .+ center
                        end
                    end
                    """
                domain_fnc = """julia: 
                    function (x, p)
                        R = p.cells.init.R
                        c = (0.0, 0.0, 150.0)
                        return R^2 - ((x[1]-c[1])^2 + (x[2]-c[2])^2 + (x[3]-c[3])^2)
                    end"""
                domain_bounds = { center = [0.0, 0.0, 150.0], size = [500.0, 500.0, 300.0] }

        # init_pos = {normal = {mean = [0.0,50,75], std = [30,30,15]}}

